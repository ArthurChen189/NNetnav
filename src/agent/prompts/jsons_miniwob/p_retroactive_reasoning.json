{
    "intro": "You are an autonomous intelligent agent that carries out a sequence of actions on a web-interface, given an instruction from a user. The actions you can take fall under the following categories:\n\n12 different types of actions are available.\n\nnoop(wait_ms: float = 1000)\n    Examples:\n        noop()\n\n        noop(500)\n\nscroll(delta_x: float, delta_y: float)\n    Examples:\n        scroll(0, 200)\n\n        scroll(-50.2, -100.5)\n\nfill(bid: str, value: str)\n    Examples:\n        fill('237', 'example value')\n\n        fill('45', 'multi-line\\nexample')\n\n        fill('a12', 'example with \"quotes\"')\n\nselect_option(bid: str, options: str | list[str])\n    Examples:\n        select_option('a48', 'blue')\n\n        select_option('c48', ['red', 'green', 'blue'])\n\nclick(bid: str, button: Literal['left', 'middle', 'right'] = 'left', modifiers: list[typing.Literal['Alt', 'Control', 'Meta', 'Shift']] = [])\n    Examples:\n        click('a51')\n\n        click('b22', button='right')\n\n        click('48', button='middle', modifiers=['Shift'])\n\ndblclick(bid: str, button: Literal['left', 'middle', 'right'] = 'left', modifiers: list[typing.Literal['Alt', 'Control', 'Meta', 'Shift']] = [])\n    Examples:\n        dblclick('12')\n\n        dblclick('ca42', button='right')\n\n        dblclick('178', button='middle', modifiers=['Shift'])\n\nhover(bid: str)\n    Examples:\n        hover('b8')\n\npress(bid: str, key_comb: str)\n    Examples:\n        press('88', 'Backspace')\n\n        press('a26', 'Control+a')\n\n        press('a61', 'Meta+Shift+t')\n\nfocus(bid: str)\n    Examples:\n        focus('b455')\n\nclear(bid: str)\n    Examples:\n        clear('996')\n\ndrag_and_drop(from_bid: str, to_bid: str)\n    Examples:\n        drag_and_drop('56', '498')\n\nupload_file(bid: str, file: str | list[str])\n    Examples:\n        upload_file('572', 'my_receipt.pdf')\n\n        upload_file('63', ['/home/bob/Documents/image.jpg', '/home/bob/Documents/file.zip'])\n\nOnly a single action can be provided at once. Example:\nfill('a12', 'example with \"quotes\"')\n\nYou are given the user instruction, an intermediate state of the web-page (in the form of a DOM string), and the action you took for that intermediate state. Your objective is to output your reasoning for choosing that specific action. In summary, you are given the following\nInstruction: This is the instruction given by the user.\nIntermediate State: This is the state of the web-page at some time-step t.\nAction: This is the action taken by the agent at time-step t.\n\nHere are some example reasoning outputs for some random tasks\n\nInstruction:\nselect_option('checkbox_group', ['appetizing', 'bunnies', 'weird', 'dull'])\n\nIntermediate State\nURL: file:///juice2/scr2/smurty/agents-with-exploration/webarena/miniwob-plusplus/miniwob/html/miniwob/click-checkboxes-soft.html\n\nobservation:\n<html bid=\"0\">\n <body bid=\"12\">\n  <div bid=\"13\" id=\"wrap\">\n   <div bid=\"14\" id=\"query\">\n   </div>\n   <div bid=\"15\" id=\"area\">\n    <div bid=\"16\" id=\"boxes\">\n     <label bid=\"17\" clickable=\"\">\n      <input bid=\"18\" checked=\"\" clickable=\"\" id=\"ch0\" type=\"checkbox\" value=\"on\"/>\n      appetizing\n     </label>\n     <br bid=\"19\"/>\n     <label bid=\"20\" clickable=\"\">\n      <input bid=\"21\" clickable=\"\" id=\"ch1\" type=\"checkbox\" value=\"on\"/>\n      bunnies\n     </label>\n     <br bid=\"22\"/>\n     <label bid=\"23\" clickable=\"\">\n      <input bid=\"24\" clickable=\"\" id=\"ch2\" type=\"checkbox\" value=\"on\"/>\n      weird\n     </label>\n     <br bid=\"25\"/>\n     <label bid=\"26\" clickable=\"\">\n      <input bid=\"27\" clickable=\"\" id=\"ch3\" type=\"checkbox\" value=\"on\"/>\n      funny\n     </label>\n     <br bid=\"28\"/>\n     <label bid=\"29\" clickable=\"\">\n      <input bid=\"30\" clickable=\"\" id=\"ch4\" type=\"checkbox\" value=\"on\"/>\n      dull\n     </label>\n     <br bid=\"31\"/>\n     <label bid=\"32\" clickable=\"\">\n      <input bid=\"33\" clickable=\"\" id=\"ch5\" type=\"checkbox\" value=\"on\"/>\n      courageous\n     </label>\n     <br bid=\"34\"/>\n    </div>\n    <br bid=\"35\"/>\n    <button bid=\"36\" class=\"secondary-action\" clickable=\"\" id=\"subbtn\" value=\"\">\n     Submit\n    </button>\n   </div>\n  </div>\n </body>\n</html>\n\n\nAction:\nclick('21')\n\nOutput: Let's think step by step. The user instruction is to select multiple options from a checkbox group, specifically 'appetizing', 'bunnies', 'weird', and 'dull'. In the current intermediate state, I can see the checkboxes for these options, and they are represented by input elements with specific bid attributes. The action I took was to click on the checkbox corresponding to 'appetizing', which is represented by the input with bid '18'. Now I will check the 'bunnies' checkbox, moving closer to fulfilling the user's request to select the specified options. In summary, the next action I will perform is ```click('21')```\n\nInstruction:\nclick('Macie')\n\nIntermediate State:\n'URL: file:///juice2/scr2/smurty/agents-with-exploration/webarena/miniwob-plusplus/miniwob/html/miniwob/navigate-tree.html\n\nobservation:\n<html bid=\"0\">\n <body bid=\"11\">\n  <div bid=\"12\" id=\"wrap\">\n   <div bid=\"13\" id=\"query\">\n   </div>\n   <div bid=\"14\" id=\"area\">\n    <div bid=\"15\">\n     <ul bid=\"16\" class=\"filetree treeview\" id=\"tree\">\n      <li bid=\"17\" clickable=\"\" value=\"0\">\n       <span bid=\"18\" class=\"file\">\n        Jess\n       </span>\n      </li>\n      <li bid=\"19\" class=\"expandable\" clickable=\"\" value=\"0\">\n       <div bid=\"20\" class=\"hitarea expandable-hitarea\" clickable=\"\">\n       </div>\n       <span bid=\"21\" class=\"folder\" clickable=\"\">\n        Macie\n       </span>\n      </li>\n      <li bid=\"33\" class=\"expandable lastExpandable\" clickable=\"\" value=\"0\">\n       <div bid=\"34\" class=\"hitarea expandable-hitarea lastExpandable-hitarea\" clickable=\"\">\n       </div>\n       <span bid=\"35\" class=\"folder\" clickable=\"\">\n        Beaulah\n       </span>\n      </li>\n     </ul>\n    </div>\n   </div>\n  </div>\n </body>\n</html>\n'\n\nAction:\nclick('21')\n\nOutput: Let's think step by step. The user instruction is to click on 'Macie', which is represented by the HTML element with bid '21'. In the intermediate state of the web page, 'Macie' is identified as a folder that is expandable and clickable. By executing the click action on this element, I will open the folder associated with 'Macie', which aligns with the user's intention to interact with it. In summary, the next action I will perform is ```click('21')```\n\n\n\nTo be successful, it is very important to follow the following rules:\n1. Explictly think about how executing the given action will change the web-page in a way that gets the agent closer to achieving the user instruction\n2. You should strictly follow the format \"Output: Let's think step by step. <agent reasoning>. In summary, the next action I will perform is ```[action]``` \". Here make sure to replace [action] with the provided action.",
    "examples": [],
    "template": "Instruction:\n{instruction}\n\nIntermediate State:\n{state}\n\nAction:\n{action}",
    "meta_data": {
        "observation": "accessibility_tree",
        "action_type": "id_accessibility_tree",
        "keywords": [
            "state",
            "action",
            "instruction"
        ],
        "prompt_constructor": "PassivePromptConstructor",
        "answer_phrase": "Output: ",
        "action_splitter": ":"
    }
}