{
    "intro": "Given an instruction from a user, an autonomous intelligent agent carries out a sequence of actions on a web-browser. The actions the agent can take fall under the following categories (we also provide the descriptions of each action):\n\n13 different types of actions are available.\n\nnoop(wait_ms: float = 1000)\n    Description: Do nothing, and optionally wait for the given time (in milliseconds).\n    Examples:\n        noop()\n\n        noop(500)\n\nsend_msg_to_user(text: str)\n    Description: Sends a message to the user.\n    Examples:\n        send_msg_to_user('Based on the results of my search, the city was built in 1751.')\n\nscroll(delta_x: float, delta_y: float)\n    Description: Scroll horizontally and vertically. Amounts in pixels, positive for right or down scrolling, negative for left or up scrolling. Dispatches a wheel event.\n    Examples:\n        scroll(0, 200)\n\n        scroll(-50.2, -100.5)\n\nfill(bid: str, value: str)\n    Description: Fill out a form field. It focuses the element and triggers an input event with the entered text. It works for <input>, <textarea> and [contenteditable] elements.\n    Examples:\n        fill('237', 'example value')\n\n        fill('45', 'multi-line\\nexample')\n\n        fill('a12', 'example with \"quotes\"')\n\nselect_option(bid: str, options: str | list[str])\n    Description: Select one or multiple options in a <select> element. You can specify option value or label to select. Multiple options can be selected.\n    Examples:\n        select_option('a48', 'blue')\n\n        select_option('c48', ['red', 'green', 'blue'])\n\nclick(bid: str, button: Literal['left', 'middle', 'right'] = 'left', modifiers: list[typing.Literal['Alt', 'Control', 'Meta', 'Shift']] = [])\n    Description: Click an element.\n    Examples:\n        click('a51')\n\n        click('b22', button='right')\n\n        click('48', button='middle', modifiers=['Shift'])\n\ndblclick(bid: str, button: Literal['left', 'middle', 'right'] = 'left', modifiers: list[typing.Literal['Alt', 'Control', 'Meta', 'Shift']] = [])\n    Description: Double click an element.\n    Examples:\n        dblclick('12')\n\n        dblclick('ca42', button='right')\n\n        dblclick('178', button='middle', modifiers=['Shift'])\n\nhover(bid: str)\n    Description: Hover over an element.\n    Examples:\n        hover('b8')\n\npress(bid: str, key_comb: str)\n    Description: Focus the matching element and press a combination of keys. It accepts the logical key names that are emitted in the keyboardEvent.key property of the keyboard events: Backquote, Minus, Equal, Backslash, Backspace, Tab, Delete, Escape, ArrowDown, End, Enter, Home, Insert, PageDown, PageUp, ArrowRight, ArrowUp, F1 - F12, Digit0 - Digit9, KeyA - KeyZ, etc. You can alternatively specify a single character you'd like to produce such as \"a\" or \"#\". Following modification shortcuts are also supported: Shift, Control, Alt, Meta.\n    Examples:\n        press('88', 'Backspace')\n\n        press('a26', 'Control+a')\n\n        press('a61', 'Meta+Shift+t')\n\nfocus(bid: str)\n    Description: Focus the matching element.\n    Examples:\n        focus('b455')\n\nclear(bid: str)\n    Description: Clear the input field.\n    Examples:\n        clear('996')\n\ndrag_and_drop(from_bid: str, to_bid: str)\n    Description: Perform a drag & drop. Hover the element that will be dragged. Press left mouse button. Move mouse to the element that will receive the drop. Release left mouse button.\n    Examples:\n        drag_and_drop('56', '498')\n\nupload_file(bid: str, file: str | list[str])\n    Description: Click an element and wait for a \"filechooser\" event, then select one or multiple input files for upload. Relative file paths are resolved relative to the current working directory. An empty list clears the selected files.\n    Examples:\n        upload_file('572', 'my_receipt.pdf')\n\n        upload_file('63', ['/home/bob/Documents/image.jpg', '/home/bob/Documents/file.zip'])\n\nYou are given the user instruction, and the final webpage after the agent completes its task. Unfortunately, we forgot to collect the final action from the agent where the agent sends a message to the user. Your objective is to guess the agent's final \"send_msg_to_user\" action. To do this, you are given the following\nInstruction: This is the instruction given by the user.\nFinal State: This is the final state of the web-page after the agent executed its actions on the browser.\n\nTo be successful, it is very important to follow the following rules:\n1. Explictly think about what kind of a mesage the agent would send in the given scenario. For instance, if the user requests information (e.g. Search for airports near CMU or Find developers with more than 5 merge requests or What is the value of AAPL stock in the chart), then the stop action should have the answer based on the final web-page (e.g. ```send_msg_to_user('The answer is Pittsburgh Airport')``` or ```send_msg_to_usr('Don Knuth, Alan Turing, Shikhar Murty')``` or ```send_msg_to_user('250$')```). Otherwise, the send_msg_to_user action should be generic (e.g. ```send_msg_to_user('I am done with the task')``` or ```send_msg_to_usr('I have filled the form as requested')```) .\n2. Your output should include reasoning steps. \n3. Follow the following format for your output: \"Let's think step by step. <your reasoning>. In summary, the agent's final message action should be ```send_msg_to_user(<your answer>)```.",
    "examples": [],
    "template": "Instruction:\n{instruction}\n\nFinal State:\n{state}",
    "meta_data": {
        "observation": "accessibility_tree",
        "action_type": "id_accessibility_tree",
        "keywords": [
            "state",
            "instruction"
        ],
        "prompt_constructor": "PassivePromptConstructor",
        "answer_phrase": "In summary, the agent's stop action should be",
        "action_splitter": "```"
    }
}