{
    "intro": "Given an instruction from a user, an autonomous intelligent agent carries out a sequence of actions on a web-browser. The actions the agent can take fall under the following categories (we also provide the descriptions of each action):\n\nPage Operation Actions:\n`click [id]`: This action clicks on an element with a specific id on the webpage.\n`type [id] [content] [press_enter_after=0|1]`: Use this to type the content into the field with id. By default, the \"Enter\" key is pressed after typing unless press_enter_after is set to 0.\n`hover [id]`: Hover over an element with id.\n`press [key_comb]`:  Simulates the pressing of a key combination on the keyboard (e.g., Ctrl+v).\n`scroll [direction=down|up]`: Scroll the page up or down.\n\nTab Management Actions:\n`new_tab`: Open a new, empty browser tab.\n`tab_focus [tab_index]`: Switch the browser's focus to a specific tab using its index.\n`close_tab`: Close the currently active tab.\n\nURL Navigation Actions:\n`goto [url]`: Navigate to a specific URL.\n`go_back`: Navigate to the previously viewed page.\n`go_forward`: Navigate to the next page (if a previous 'go_back' action was performed).\n\nCompletion Action:\n`stop [answer]`: Issue this action when you believe the task is complete. If the objective is to find a text-based answer, provide the answer in the bracket. If you believe the task is impossible to complete, provide the answer as \"N/A\" in the bracket.\n\nHomepage:\nIf you want to visit other websites, check out the homepage at http://homepage.com. It has a list of websites you can visit.\n\nYou are given the user instruction, and the final webpage after the agent finished its task. Unfortunately, we forgot to collect the final stop action from the agent. Your objective is to guess the agent's stop action. To do this, you are given the following\nInstruction: This is the instruction given by the user.\nFinal State: This is the final state of the web-page after the agent executed its actions on the browser.\n\nHere are some examples of valid outputs:\n1. Let's think step-by-step. The task requires me to find the person with the most number of upvotes. I see the answer to that is Alice Oh. Therefore I will stop now. In summary, my next action will be ```stop [Alice Oh]```.\n2. Let's think step-by-step. The task required setting the price of Sprite to 25$ which I have already done. Thus I will stop now. In summary, my next action will be ```stop [N/A]```.\n3. Let's think step-by-step. I was supposed to find the distance from Brad's house to the coffee shop. I see this info on the map as 0.3 miles. Thus I will issue the stop action. In summary, my next action will be ```stop [0.3 miles]```\n\nTo be successful, it is very important to follow the following rules:\n1. Explictly think about what kind of a stop action was needed. For instance, if the user requests information (e.g. Search for airports near CMU or Find developers with more than 5 merge requests), then the stop action should have the answer based on the final web-page (e.g. ```stop [Pittsburgh Airport]``` or ```stop [Don Knuth, Alan Turing, Shikhar Murty]```). Otherwise, the stop action should be without any arguments (e.g. ```stop```).\n2. Your output should include reasoning steps. Also make sure to wrap the stop action in triple backticks for e.g. ```stop [<your answer>]```. Overall, follow the following format for your output: \"Let's think step by step. <your reasoning>. In summary, my next action should be ```stop [<your answer>]```.",
    "examples": [],
    "template": "Instruction:\n{instruction}\n\nFinal State:\n{state}",
    "meta_data": {
        "observation": "accessibility_tree",
        "action_type": "id_accessibility_tree",
        "keywords": [
            "state",
            "instruction"
        ],
        "prompt_constructor": "PassivePromptConstructor",
        "answer_phrase": "",
        "action_splitter": "```"
    }
}